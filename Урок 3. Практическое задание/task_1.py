"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
import sys
import time


def time_of_function(func):
    def wrapper(*args):
        start_val = time.time()
        res = func(*args)
        end_val = time.time()
        print(end_val - start_val)
        return res

    return wrapper


""" 
a) заполнение списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
"""


@time_of_function
def get_list(n=100000):  # O(len)
    return [i for i in range(n)]  # O(len)


@time_of_function
def get_dict(n=100000):  # O(len)
    return {i: None for i in range(n)}  # O(len)


lst1 = get_list()
dict1 = get_dict()
print(sys.getsizeof(lst1))
print(sys.getsizeof(dict1))
"""
Список заполняется быстрее словаря, т.к. у словаря вычисляется хэш ключа, что занимает дополнительное время, 
кроме того, словарь занимает больше места в памяти
"""

"""
b) получение элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
"""


@time_of_function
def get_elem_lst(lst):  # O(len)
    for i in range(10, 1000):  # O(len)
        print(lst[i], end=' ')  # O(1)


@time_of_function
def get_elem_dict(dct):  # O(len)
    for i in range(10, 1000):  # O(len)
        print(dct[i], end=' ')  # O(1)


get_elem_lst(lst1)
get_elem_dict(dict1)
"""
Получение элементов списка быстрее, т.к. у словаря вычисляется хэш ключа, что занимает дополнительное время, 
"""

"""
с) удаление элемента списка, оцените сложность в O-нотации (операции нужно проводить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно проводить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
   """


@time_of_function
def del_elem_lst(lst):  # O(len)
    for i in range(10, 1000):  # O(len)
        del lst[i]  # O(n)


@time_of_function
def del_elem_dict(dct):  # O(len)
    for i in range(10, 1000):  # O(len)
        del dct[i]  # O(1)


del_elem_lst(lst1)
del_elem_dict(dict1)

"""
Удаление элементов из списка занимает больше времени, т.к. у словаря вычисляется хэш ключа, что занимает дополнительное время, 
"""
