"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
users = {'vitaliy': [321, 1], 'oleg': [321, 1], 'olga': [321, 0], 'piter': [321, 0]}


def authentication_1(login, pas):
    """

    Сложность: O(n)
    """
    if login in users and pas == str(users[login][0]):  # O(n)
        if users[login][1] == 1:  # O(1)
            print('Добро пожаловать!')  # O(1)
        else:  # O(1)
            print('Вам нужно активировать учетную запись')  # O(1)
    else:  # O(1)
        print('Пользователь с таким логином не зарегистрирован')  # O(1)


def authentication_2(login, pas):
    """

       Сложность: O(n^2)
    """
    for i in users.keys():                          # O(n)
        if i == login:                              # O(1)
            for v in users.values():                # O(n)
                if str(v[0]) == pas and v[1] == 1:  # O(1)
                    print('Добро пожаловать!')      # O(1)


if __name__ == '__main__':
    login = input('Введите Ваш Login: ')
    password = input('Введите Ваш Пароль: ')
    authentication_1(login, password)
    authentication_2(login, password)


""" Функция authentication_1 проверят активацию учетной записи с алгоритмической сложностью O(n),
    что является более эффективным алгоритмом чем O(n^2)
"""