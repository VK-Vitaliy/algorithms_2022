"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""

"""
Задание с курса "Основы языка Python".
Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки
в формате «Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий,
а значения — словари, содержащие записи в которых фамилия начинается с соответствующей буквы.
"""
from memory_profiler import memory_usage
from json import dumps


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


# Исходное решение
@memory
def thesaurus_adv1(*args):
    person_dict = {}
    for i in args:
        first_name, second_name = i.split()
        if not person_dict.get((second_name[0])):
            person_dict[second_name[0]] = {first_name[0]: [i]}
        elif not person_dict[second_name[0]].get(first_name[0]):
            person_dict[second_name[0]][first_name[0]] = [i]
        else:
            person_dict[second_name[0]][first_name[0]].append(i)
    return person_dict


# Оптимизированное решение - сериализация
@memory
def thesaurus_adv2(*args):
    person_dict = {}
    for i in args:
        first_name, second_name = i.split()
        if not person_dict.get((second_name[0])):
            person_dict[second_name[0]] = {first_name[0]: [i]}
        elif not person_dict[second_name[0]].get(first_name[0]):
            person_dict[second_name[0]][first_name[0]] = [i]
        else:
            person_dict[second_name[0]][first_name[0]].append(i)
    return dumps(person_dict)


thesaurus_adv1("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
thesaurus_adv2("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")

"""
Аналитика:
Для оптимизации памяти я использовал сериализацию словаря в формат json-строк, 
в результате чего удалось добиться уменьшения расхода памяти
Исходное решение (Выполнение заняло 0.0234375 Mib)
Оптимизированное решение (0.01171875 Mib)
"""