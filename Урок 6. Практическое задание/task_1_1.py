"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""

"""
Задание с курса "Основы языка Python".
Вводится строка. Необходимо в ней заменить кириллические символы на соответствующие латинские обозначения 
(без учета регистра букв), а все остальные символы - на символ дефиса (-)
"""
from memory_profiler import memory_usage

t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
     'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
     'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
     'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper

# Исходное решение
@decor
def traslit(str_in):
    res = []
    for i in str_in:
        res.append(t.get(i.lower(), '-'))
    return "".join(res)


# Оптимизированное решение c map
@decor
def traslit2(str_in):
    return ''.join(map(lambda x: t.get(x.lower(), '-'), str_in))


example = 'У лукоморья дуб зеленый, Златая цепь на дубе том: И днем и ночью кот ученый Всё ходит по цепи кругом; ' \
          'Идет направо — песнь заводит, Налево — сказку говорит. Там чудеса: там леший бродит, Русалка на ветвях сидит;' \
          ' Там на неведомых дорожках Следы невиданных зверей; Избушка там на курьих ножках Стоит без окон, без дверей;' \
          'Там лес и дол видений полны; Там о заре прихлынут волны На брег песчаный и пустой, ' \
          'И тридцать витязей прекрасных; Чредой из вод выходят ясных, И с ними дядька их морской; ' \
          'Там королевич мимоходом Пленяет грозного царя; Там в облаках перед народом Через леса, через моря ' \
          'Колдун несет богатыря; В темнице там царевна тужит, А бурый волк ей верно служит; ' \
          'Там ступа с Бабою Ягой Идет, бредет сама собой; Там царь Кащей над златом чахнет; Там русской дух… ' \
          'там Русью пахнет! И там я был, и мед я пил; У моря видел дуб зеленый; ' \
          'Под ним сидел, и кот ученый Свои мне сказки говорил. Одну я помню: сказку эту Поведаю теперь я свету…'

res, mem_diff = traslit(example)
print(f"Выполнение заняло {mem_diff} Mib")

res2, mem_diff2 = traslit2(example)
print(f"Выполнение заняло {mem_diff2} Mib")

"""
Аналитика:
Для оптимизации памяти я использовал функцию map, в результате чего удалось добиться уменьшения расхода памяти
Исходное решение (Выполнение заняло 0.0234375 Mib)
Оптимизированное решение (Выполнение заняло 0.00390625 Mib)
"""
